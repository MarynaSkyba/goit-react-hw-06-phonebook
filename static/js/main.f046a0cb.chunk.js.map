{"version":3,"sources":["components/contactsList/ContactList.styled.jsx","components/contactsList/ContactList.jsx","components/contactsForm/ContactForm.styled.jsx","components/contactsForm/ContactForm.jsx","components/filter/Filter.styled.jsx","components/filter/Filter.jsx","components/App/Title.styled.js","components/App.js","index.js"],"names":["Button","styled","button","List","ul","Name","p","Item","li","ContactList","contacts","onDeleteContacts","map","id","name","number","onClick","Form","form","Label","label","Input","input","ContactForm","onSubmit","useState","setName","setNumber","nameId","uuidv4","telId","handleChange","e","target","value","preventDefault","htmlFor","type","pattern","title","required","onChange","Filter","onBlur","Title","h2","App","setContacts","filter","setFilter","useEffect","currentContacts","JSON","parse","localStorage","getItem","setItem","stringify","find","contact","toLowerCase","alert","newContact","prevState","currentTarget","includes","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAEaA,EAASC,IAAOC,OAAV,sSAaNC,EAAOF,IAAOG,GAAV,qJAQJC,EAAOJ,IAAOK,EAAV,8IAQJC,EAAON,IAAOO,GAAV,wP,OCdFC,EAbK,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,iBAAb,OAClB,cAACR,EAAD,UACGO,EAASE,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACZ,eAACR,EAAD,WACE,eAACF,EAAD,WACGS,EADH,MACYC,KAEZ,cAACf,EAAD,CAAQgB,QAAS,kBAAML,EAAiBE,IAAxC,sBAJSA,SCLJI,EAAOhB,IAAOiB,KAAV,gIAOJC,EAAQlB,IAAOmB,MAAV,wJAQLC,EAAQpB,IAAOqB,MAAV,uUAcLtB,EAASC,IAAOC,OAAV,wTC3BJ,SAASqB,EAAT,GAAoC,IAAbC,EAAY,EAAZA,SACpC,EAAwBC,mBAAS,IAAjC,mBAAOX,EAAP,KAAaY,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAOV,EAAP,KAAeY,EAAf,KAEMC,EAASC,cACTC,EAAQD,cAERE,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,OAAlBnB,EAAR,EAAQA,KAAMoB,EAAd,EAAcA,MACd,OAAQpB,GACN,IAAK,OACHY,EAAQQ,GACR,MACF,IAAK,SACHP,EAAUO,GACV,MACF,QACE,SAWN,OACE,eAACjB,EAAD,CAAMO,SARa,SAAAQ,GACnBA,EAAEG,iBACFX,EAASV,EAAMC,GACfW,EAAQ,IACRC,EAAU,KAIV,UACE,eAACR,EAAD,CAAOiB,QAASR,EAAhB,iBAEE,cAACP,EAAD,CACEgB,KAAK,OACLvB,KAAK,OACLwB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACR3B,GAAIe,EACJM,MAAOpB,EACP2B,SAAUV,OAId,eAACZ,EAAD,CAAOiB,QAASN,EAAhB,sBAEE,cAACT,EAAD,CACEgB,KAAK,MACLvB,KAAK,SACLwB,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACR3B,GAAIiB,EACJI,MAAOnB,EACP0B,SAAUV,OAGd,cAAC,EAAD,CAAQM,KAAK,SAAb,gCC3DC,I,EAAMlB,EAAQlB,IAAOmB,MAAV,wNAWLC,EAAQpB,IAAOqB,MAAV,uUCAHoB,EATA,SAAC,GAAiC,IAA/BR,EAA8B,EAA9BA,MAAOO,EAAuB,EAAvBA,SAAUE,EAAa,EAAbA,OACjC,OACE,eAAC,EAAD,mCAEE,cAAC,EAAD,CAAON,KAAK,OAAOH,MAAOA,EAAOO,SAAUA,EAAUE,OAAQA,QCNtDC,EAAQ3C,IAAO4C,GAAV,wNCKH,SAASC,IACtB,MAAgCrB,mBAAS,CACvC,CAAEZ,GAAI,OAAQC,KAAM,gBAAiBC,OAAQ,aAC7C,CAAEF,GAAI,OAAQC,KAAM,iBAAkBC,OAAQ,aAC9C,CAAEF,GAAI,OAAQC,KAAM,gBAAiBC,OAAQ,aAC7C,CAAEF,GAAI,OAAQC,KAAM,iBAAkBC,OAAQ,eAJhD,mBAAOL,EAAP,KAAiBqC,EAAjB,KAMA,EAA4BtB,mBAAS,IAArC,mBAAOuB,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WAAO,IAAD,EACRC,EAAe,UAAGC,KAAKC,MAAMC,aAAaC,QAAQ,oBAAnC,QAAmD,GACxEJ,GAAmBJ,EAAYI,KAC9B,IAEHD,qBAAU,WACRI,aAAaE,QAAQ,WAAYJ,KAAKK,UAAU/C,MAC/C,CAACA,IAgCJ,OACE,gCACE,cAACkC,EAAD,wBACA,cAACrB,EAAD,CAAaC,SAjCS,SAACV,EAAMC,GAC/B,GAAIL,EAASgD,MAAK,SAAAC,GAAO,OAAIA,EAAQ7C,KAAK8C,gBAAkB9C,EAAK8C,iBAC/DC,MAAM,GAAD,OAAI/C,EAAJ,gCADP,CAIA,IAAMgD,EAAa,CACjBjD,GAAIgB,cACJf,OACAC,UAEFgC,GAAY,SAAAgB,GAAS,OAAKD,GAAL,mBAAoBC,WAwBvC,cAACnB,EAAD,uBACA,cAAC,EAAD,CAAQV,MAAOc,EAAQP,SAlBN,SAAAT,GACnBiB,EAAUjB,EAAEgC,cAAc9B,QAiBuBS,OAdhC,SAAAX,GACjBA,EAAEgC,cAAc9B,MAAQ,GACxBe,EAAU,OAaR,cAAC,EAAD,CAAavC,SATRA,EAASsC,QAAO,SAAAW,GAAO,OAAIA,EAAQ7C,KAAK8C,cAAcK,SAASjB,EAAOY,kBAShCjD,iBAvBxB,SAAAuD,GACrBnB,GAAY,SAAAgB,GAAS,OAAIA,EAAUf,QAAO,SAAAW,GAAO,OAAIA,EAAQ9C,KAAOqD,cClCxEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACvB,EAAD,MAEFwB,SAASC,eAAe,W","file":"static/js/main.f046a0cb.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const Button = styled.button`\n  display: inline-block;\n  width: 30%;\n  border-width: 0;\n  line-height: 40px;\n  border-radius: 20px;\n  box-shadow: 4px 4px 8px 0px rgba(34, 60, 80, 0.2);\n  text-transform: uppercase;\n  font-size: 14px;\n  background-color: antiquewhite;\n  cursor: pointer;\n`;\n\nexport const List = styled.ul`\n  list-style: none;\n  max-width: 400px;\n  padding: 40px 50px;\n  margin: 50px auto 0;\n  background-color: gainsboro;\n`;\n\nexport const Name = styled.p`\n  display: block;\n  padding: 0 15px;\n  font-family: 'Roboto', sans-serif;\n  color: black;\n  font-size: 14px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  box-shadow: 4px 4px 8px 0px rgba(34, 60, 80, 0.2);\n  border-radius: 20px;\n  margin-bottom: 10px;\n  background: rgba(255, 255, 255, 0.2);\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, List, Name, Item } from './ContactList.styled';\n\nconst ContactList = ({ contacts, onDeleteContacts }) => (\n  <List>\n    {contacts.map(({ id, name, number }) => (\n      <Item key={id}>\n        <Name>\n          {name} : {number}\n        </Name>\n        <Button onClick={() => onDeleteContacts(id)}>Delete</Button>\n      </Item>\n    ))}\n  </List>\n);\n\nexport default ContactList;\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    }),\n  ),\n  onConDeleteContactshange: PropTypes.func,\n};\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  max-width: 400px;\n  padding: 40px 50px;\n  margin: 50px auto 0;\n  background-color: gainsboro;\n`;\n\nexport const Label = styled.label`\n  display: block;\n  font-family: 'Roboto', sans-serif;\n  color: black;\n  text-transform: uppercase;\n  font-size: 14px;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  width: 100%;\n  padding: 0 0 0 15px;\n  margin: 10px 0 15px;\n  border-width: 0;\n  line-height: 40px;\n  border-radius: 20px;\n  box-shadow: 4px 4px 8px 0px rgba(34, 60, 80, 0.2);\n  color: black;\n  background: rgba(255, 255, 255, 0.2);\n  font-family: 'Roboto', sans-serif;\n`;\n\nexport const Button = styled.button`\n  display: block;\n  width: 103%;\n  margin: 40px 0 15px;\n  border-width: 0;\n  line-height: 40px;\n  border-radius: 20px;\n  box-shadow: 4px 4px 8px 0px rgba(34, 60, 80, 0.2);\n  text-transform: uppercase;\n  font-size: 14px;\n  background-color: antiquewhite;\n  cursor: pointer;\n`;\n","import { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Form, Label, Input, Button } from './ContactForm.styled';\n\nexport default function ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameId = uuidv4();\n  const telId = uuidv4();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(name, number);\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label htmlFor={nameId}>\n        Name\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          id={nameId}\n          value={name}\n          onChange={handleChange}\n        />\n      </Label>\n\n      <Label htmlFor={telId}>\n        Telephone\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          id={telId}\n          value={number}\n          onChange={handleChange}\n        />\n      </Label>\n      <Button type=\"submit\">Add to contacts</Button>\n    </Form>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: block;\n  width: 400px;\n  margin: 50px auto 0;\n  font-family: 'Roboto', sans-serif;\n  color: black;\n  text-transform: uppercase;\n  text-align: center;\n  font-size: 14px;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  width: 100%;\n  padding: 0 0 0 15px;\n  margin: 10px 0 15px;\n  border-width: 0;\n  line-height: 40px;\n  border-radius: 20px;\n  box-shadow: 4px 4px 8px 0px rgba(34, 60, 80, 0.2);\n  color: black;\n  background: rgba(255, 255, 255, 0.2);\n  font-family: 'Roboto', sans-serif;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, Input } from '../filter/Filter.styled';\n\nconst Filter = ({ value, onChange, onBlur }) => {\n  return (\n    <Label>\n      Find contacts by name\n      <Input type=\"text\" value={value} onChange={onChange} onBlur={onBlur} />\n    </Label>\n  );\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n","import styled from '@emotion/styled';\n\nexport const Title = styled.h2`\n  display: block;\n  width: 400px;\n  margin: 50px auto 0;\n  font-family: 'Roboto', sans-serif;\n  color: black;\n  text-transform: uppercase;\n  text-align: center;\n  font-size: 34px;\n`;\n","import { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport ContactList from './contactsList/ContactList';\nimport ContactForm from './contactsForm/ContactForm';\nimport Filter from './filter/Filter';\nimport { Title } from './App/Title.styled';\n\nexport default function App() {\n  const [contacts, setContacts] = useState([\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  ]);\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    const currentContacts = JSON.parse(localStorage.getItem('contacts')) ?? '';\n    currentContacts && setContacts(currentContacts);\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const formSubmitHandler = (name, number) => {\n    if (contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase())) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    const newContact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n    setContacts(prevState => [newContact, ...prevState]);\n  };\n\n  const deleteContacts = contactId => {\n    setContacts(prevState => prevState.filter(contact => contact.id !== contactId));\n  };\n\n  const changeFilter = e => {\n    setFilter(e.currentTarget.value);\n  };\n\n  const changeBlur = e => {\n    e.currentTarget.value = '';\n    setFilter('');\n  };\n\n  const filteredContacts = () => {\n    return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\n  };\n\n  return (\n    <div>\n      <Title>Phonebook</Title>\n      <ContactForm onSubmit={formSubmitHandler} />\n      <Title>Contacts</Title>\n      <Filter value={filter} onChange={changeFilter} onBlur={changeBlur} />\n      <ContactList contacts={filteredContacts()} onDeleteContacts={deleteContacts} />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}